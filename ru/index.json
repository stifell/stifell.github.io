[{"authors":null,"categories":null,"content":"Денис Матюшкин – студент технического направления. В настоящее время учится в РУДН, пытается освоить предмет: операционные системы. Его интересы включают программирование на разных языках, машинное обучение и изучение английского языка.\n","date":1653868801,"expirydate":-62135596800,"kind":"term","lang":"ru","lastmod":1653868801,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Денис Матюшкин – студент технического направления. В настоящее время учится в РУДН, пытается освоить предмет: операционные системы. Его интересы включают программирование на разных языках, машинное обучение и изучение английского языка.","tags":null,"title":"Матюшкин Денис","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://stifell.github.io/ru/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Матюшкин Денис"],"categories":["Повседневая жизнь"],"content":"Как я провел прошлую неделю   Начало недели выдалось легким, поэтому в понедельник я занимался спортом и читал книгу.\n  Вторник и среда в целом ничем не отличались, разве что я начал делать лабораторные работы по операционным системам.\n  Пятница — тяжелый день. Первые две пары я провел за компьютером, изучая C++. C 15:00 до 19:20 учил английский язык.\n  В субботу с 12:00 до 14:50 по компьютерному практику были пары. Мы сделали лабораторную работу на Arduino.\n  В воскресенье полностью отдохнул морально и физически.\n  ","date":1653868801,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653868801,"objectID":"e9dbc8a770a01a3c7a86a090c1b9af65","permalink":"https://stifell.github.io/ru/post/lastweek5/","publishdate":"2022-05-30T00:00:01Z","relpermalink":"/ru/post/lastweek5/","section":"post","summary":"О том, как я провел прошлую неделю","tags":["Моя неделя"],"title":"Моя прошлая неделя","type":"post"},{"authors":["Матюшкин Денис"],"categories":["Учеба"],"content":"Обзор Hugo - это статический генератор веб-сайтов HTML и CSS, написанный на Go. Он оптимизирован для обеспечения скорости, простоты использования и возможности настройки. Хьюго берет каталог с контентом и шаблонами и превращает их в полноценный HTML-сайт.\nHugo полагается на файлы Markdown с исходным кодом для метаданных, и вы можете запустить Hugo из любого каталога. Это хорошо работает для общих хостов и других систем, где у вас нет привилегированной учетной записи.\nHugo рендерит типичный веб-сайт среднего размера за доли секунды. Хорошее эмпирическое правило заключается в том, что каждый фрагмент контента отображается примерно за 1 миллисекунду.\nHugo разработан так, чтобы хорошо работать с любым типом веб-сайта, включая блоги, tumbles и docs.\nПоддерживаемые архитектуры В настоящее время мы предоставляем готовые двоичные файлы Hugo для Windows, Linux, FreeBSD, NetBSD, DragonFly BSD, OpenBSD, macOS (Darwin) и Android для архитектур x64, i386 и ARM.\nHugo также может быть скомпилирован из исходного кода везде, где может выполняться цепочка инструментов компилятора Go, например, для других операционных систем, включая Plan 9 и Solaris.\nПолная документация доступна по адресу Hugo Documentation.\nВыберите способ установки Если вы хотите использовать Hugo в качестве генератора сайтов, просто установите двоичные файлы Hugo. Двоичные файлы Hugo не имеют внешних зависимостей.\nЧтобы внести свой вклад в исходный код или документацию Hugo, вам следует разветвить проект Hugo GitHub и клонируйте его на свой локальный компьютер.\nНаконец, вы можете установить исходный код Hugo с помощью go, самостоятельно создать двоичные файлы и запустить Hugo таким образом. Создание двоичных файлов - простая задача для опытного добытчика go.\nУстановите Hugo в качестве генератора Вашего сайта (Бинарная установка) Используйте инструкцию по установке в документации Hugo.\nСборка и установка двоичных файлов из исходного кода (Расширенная установка) Необходимые инструменты  Git Go  Извлечение из GitHub Для извлечения и сборки исходного кода из GitHub:\nmkdir $HOME/src cd $HOME/src git clone https://github.com/gohugoio/hugo.git cd hugo go install Если вы являетесь пользователем Windows, замените переменную среды $HOME, указанную выше, на %USERPROFILE%.\nЕсли вы хотите скомпилировать с поддержкой Sass/SCSS, используйте --tags extended и убедитесь, что в вашей среде go установлено значение CGO_ENABLED=1. Если вы не хотите, чтобы CGO был включен, вы можете использовать следующую команду, чтобы временно включить CGO только для компиляции hugo:\nCGO_ENABLED=1 go install --tags extended Документация Хьюго Документация Hugo теперь находится в собственном репозитории, см. https://github.com/gohugoio/hugoDocs . Но мы храним версию этой документации в качестве “поддерева git” в этом репозитории. Чтобы создать подпапку “/docs” в качестве веб-сайта Hugo, вам необходимо клонировать это хранилище:\ngit clone git@github.com:gohugoio/hugo.git ","date":1653868800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653868800,"objectID":"1ba1da42e133e1a006844b4b012bf188","permalink":"https://stifell.github.io/ru/post/hugo/","publishdate":"2022-05-30T00:00:00Z","relpermalink":"/ru/post/hugo/","section":"post","summary":"Статья о статическои генераторе сайтов hugo","tags":["Образование"],"title":"Статический генератор сайтов hugo","type":"post"},{"authors":["Матюшкин Денис"],"categories":["Повседневая жизнь"],"content":"Как я провел прошлую неделю:   Дни с понедельника по четверг прошли легко, так как пар было мало, а вот лабораторных работ по ОС было много, поэтому начал делать, не поленился.\n  В пятницу я провел первые две пары за компьютером, изучая C++. С 15:00 до 19:20 я занимался английским языком.\n  В субботу я ходил на занятия по ИТ, делал лабораторные тесты на Arduino. После этого я поехал на соревнования по бегу среди московских вузов.\n  В воскресенье я полностью отдохнул морально и физически.\n  ","date":1653523201,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653523201,"objectID":"0eb5748af843b81c4aa5883c537ac912","permalink":"https://stifell.github.io/ru/post/lastweek4/","publishdate":"2022-05-26T00:00:01Z","relpermalink":"/ru/post/lastweek4/","section":"post","summary":"О том, как я провел прошлую неделю","tags":["Моя неделя"],"title":"Моя прошлая неделя","type":"post"},{"authors":["Матюшкин Денис"],"categories":null,"content":"Данные:  Доклад Презентация  ","date":1653523200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653523200,"objectID":"be6ac1e367643174a502cecf0f30a643","permalink":"https://stifell.github.io/ru/publication/dns/","publishdate":"2022-05-26T00:00:00Z","relpermalink":"/ru/publication/dns/","section":"publication","summary":"Основой DNS является представление об иерархической структуре доменного имени изонах. Каждый сервер, отвечающий за имя, может делегировать ответственность за дальнейшую часть домена другому серверу.","tags":["DNS","Глубокое обучение"],"title":"Архитекртура и функционирование DNS","type":"publication"},{"authors":null,"categories":["Python"],"content":"Часть 1: Регистрация бота Самая простая и описанная часть. Очень коротко: нужно найти бота @BotFather, написать ему /start, или /newbot, заполнить поля, которые он спросит (название бота и его короткое имя), и получить сообщение с токеном бота и ссылкой на документацию. Токен нужно сохранить, желательно надёжно, так как это единственный ключ для авторизации бота и взаимодействия с ним.\nЧасть 2: Подготовка к написанию кода Как уже было сказано в заголовке, писать бота мы будем на Python’е. В данной статье будет описана работа с библиотекой PyTelegramBotAPI (Telebot). Если у вас не установлен Python, то сперва нужно сделать это: в терминале Linux нужно ввести\nsudo apt-get install python python-pip  Если же вы пользуетесь Windows, то нужно скачать Python с официального сайта .\nПосле, в терминале Linux, или командной строке Windows вводим\npip install pytelegrambotapi  Теперь все готово для написания кода.\nЧасть 3: Получаем сообщения и говорим «Привет» Небольшое отступление. Телеграмм умеет сообщать боту о действиях пользователя двумя способами: через ответ на запрос сервера (Long Poll), и через Webhook, когда сервер Телеграмма сам присылает сообщение о том, что кто-то написал боту. Второй способ явно выглядит лучше, но требует выделенного IP-адреса, и установленного SSL на сервере. В этой статье я хочу рассказать о написании бота, а не настройке сервера, поэтому пользоваться мы будем Long Poll’ом.\nОткрывайте ваш любимый текстовый редактор, и давайте писать код бота!\nПервое, что нужно сделать это импортировать нашу библиотеку и подключить токен бота:\nimport telebot; bot = telebot.TeleBot(\u0026#39;%ваш токен%\u0026#39;); Теперь объявим метод для получения текстовых сообщений:\n@bot.message_handler(content_types=[\u0026#39;text\u0026#39;]) def get_text_messages(message): В этом участке кода мы объявили слушателя для текстовых сообщений и метод их обработки. Поле content_types может принимать разные значения, и не только одно, например\n@bot.message_handler(content_types=[\u0026#39;text\u0026#39;, \u0026#39;document\u0026#39;, \u0026#39;audio\u0026#39;]) Будет реагировать на текстовые сообщения, документы и аудио. Более подробно можно почитать в официальной документации\nТеперь добавим в наш метод немного функционала: если пользователь напишет нам «Привет», то скажем ему «Привет, чем я могу помочь?», а если нам напишут команду «/help», то скажем пользователю написать «Привет»:\nif message.text == \u0026#34;Привет\u0026#34;: bot.send_message(message.from_user.id, \u0026#34;Привет, чем я могу тебе помочь?\u0026#34;) elif message.text == \u0026#34;/help\u0026#34;: bot.send_message(message.from_user.id, \u0026#34;Напиши привет\u0026#34;) else: bot.send_message(message.from_user.id, \u0026#34;Я тебя не понимаю. Напиши /help.\u0026#34;) Данный участок кода не требует комментариев, как мне кажется. Теперь нужно добавить в наш код только одну строчку (вне всех методов).\nbot.polling(none_stop=True, interval=0) Теперь наш бот будет постоянно спрашивать у сервера Телеграмма «Мне кто-нибудь написал?», и если мы напишем нашему боту, то Телеграмм передаст ему наше сообщение. Сохраняем весь файл, и пишем в консоли\npython bot.py  Где bot.py – имя нашего файла.\nТеперь можно написать боту и посмотреть на результат:\n   Часть 4: Кнопки и ветки сообщений Отправлять сообщения это несомненно весело, но ещё веселее вести с пользователем диалог: задавать ему вопросы и получать на них ответы. Допустим, теперь наш бот будет спрашивать у пользователя по очереди его имя, фамилию и возраст. Для этого мы будем использовать метод register_next_step_handler бота:\nname = \u0026#39;\u0026#39;; surname = \u0026#39;\u0026#39;; age = 0; @bot.message_handler(content_types=[\u0026#39;text\u0026#39;]) def start(message): if message.text == \u0026#39;/reg\u0026#39;: bot.send_message(message.from_user.id, \u0026#34;Как тебя зовут?\u0026#34;); bot.register_next_step_handler(message, get_name); #следующий шаг – функция get_name else: bot.send_message(message.from_user.id, \u0026#39;Напиши /reg\u0026#39;); def get_name(message): #получаем фамилию global name; name = message.text; bot.send_message(message.from_user.id, \u0026#39;Какая у тебя фамилия?\u0026#39;); bot.register_next_step_handler(message, get_surnme); def get_surname(message): global surname; surname = message.text; bot.send_message(\u0026#39;Сколько тебе лет?\u0026#39;); bot.register_next_step_handler(message, get_age); def get_age(message): global age; while age == 0: #проверяем что возраст изменился try: age = int(message.text) #проверяем, что возраст введен корректно except Exception: bot.send_message(message.from_user.id, \u0026#39;Цифрами, пожалуйста\u0026#39;); bot.send_message(message.from_user.id, \u0026#39;Тебе \u0026#39;+str(age)+\u0026#39; лет, тебя зовут \u0026#39;+name+\u0026#39; \u0026#39;+surname+\u0026#39;?\u0026#39;) И так, данные пользователя мы записали. В этом примере показан очень упрощённый пример, по хорошему, хранить промежуточные данные и состояния пользователя нужно в БД, но мы сегодня работаем с ботом, а не с базами данных. Последний штрих – запросим у пользователей подтверждение того, что все введено верно, да не просто так, а с кнопками! Для этого немного отредактируем код метода get_age\ndef get_age(message): global age; while age == 0: #проверяем что возраст изменился try: age = int(message.text) #проверяем, что возраст введен корректно except Exception: …","date":1653523200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653523200,"objectID":"bc2c09c3ef4101dd0e9dbfba61006c3f","permalink":"https://stifell.github.io/ru/project/tgbot/","publishdate":"2022-05-26T00:00:00Z","relpermalink":"/ru/project/tgbot/","section":"project","summary":"Статья о телеграм боте на Python","tags":["Глубокое обучение"],"title":"Телеграм бот на Python","type":"project"},{"authors":["Матюшкин Денис"],"categories":["Учеба"],"content":"Статья Научные языки программирования В компьютерном программировании научный язык программирования может относиться к двум степеням одной и той же концепции.\nВ широком смысле, научный язык программирования — это язык программирования, который широко используется в вычислительной науке и вычислительной математике. В этом смысле C/C++ и Python можно считать научными языками программирования.\nВ более строгом смысле, научный язык программирования — это язык, разработанный и оптимизированный для использования математических формул и матриц. Такие языки характеризуются не только наличием библиотек, выполняющих математические или научные функции, но и синтаксисом самого языка. Например, ни в C++, ни в Python нет встроенных типов матриц или функций для матричной арифметики (сложение, умножение и т. д.); вместо этого эта функциональность доступна через стандартные библиотеки. Языки научного программирования в более строгом смысле включают ALGOL, APL, Fortran, J, Julia, Maple, MATLAB и R.\nНаучные языки программирования не следует путать с научным языком в целом, который в общих чертах относится к более высоким стандартам точности, правильности и краткости, ожидаемым от практиков научного метода.\nПримеры Линейная алгебра\nНаучные языки программирования предоставляют средства для работы с линейной алгеброй. Например, следующая программа Julia решает систему линейных уравнений:\nA = rand(20, 20) # A - матрица 20x20 b = rand(20) # b — вектор из 20 элементов x = A\\b # x является решением A*x = b  Работа с большими векторами и матрицами является ключевой особенностью этих языков, поскольку линейная алгебра закладывает основу для математической оптимизации, которая, в свою очередь, позволяет использовать основные приложения, такие как глубокое обучение.\nВ научном языке программирования мы можем вычислять оптимум функции с синтаксисом, близким к математическому языку. Например, следующий код Жюлиа находит минимум многочлена\nP(x,y) = x^2 - 3xy + 5y^2 - 7y + 3\nusing Optim P(x,y) = x^2 - 3x*y + 5y^2 - 7y + 3 z₀ = [ 0.0 0.0 ] # отправная точка алгоритма оптимизации optimize(z -\u0026gt; P(z...), z₀, Newton(); autodiff = :forward) В этом примере используется метод минимизации Ньютона. Современные языки научного программирования будут использовать автоматическое дифференцирование для вычисления градиентов и гессианов функции, заданной в качестве входных данных; ср. дифференцируемое программирование. Здесь для этой задачи была выбрана автоматическая дифференциация вперед. Старые научные языки программирования, такие как почтенный Фортран, требовали, чтобы программист передал рядом с функцией, которую необходимо оптимизировать, функцию, вычисляющую градиент, и функцию, вычисляющую гессиан.\nИмея больше информации о минимизируемой функции, можно использовать более эффективные алгоритмы. Например, выпуклая оптимизация обеспечивает более быстрые вычисления, когда функция является выпуклой, квадратичное программирование обеспечивает более быстрые вычисления, когда функция не более чем квадратична по своим переменным, и линейное программирование, когда функция не более чем линейна.\n","date":1653523200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653523200,"objectID":"505f1926928104c1ffdf04557ad3e744","permalink":"https://stifell.github.io/ru/post/programming/","publishdate":"2022-05-26T00:00:00Z","relpermalink":"/ru/post/programming/","section":"post","summary":"Статья о языках научного программирования","tags":["Образование"],"title":"Языки научного программирования","type":"post"},{"authors":["Матюшкин Денис"],"categories":["Повседневая жизнь"],"content":"Как я провел прошлую неделю:   Дни с понедельника по четверг были легкими, так как пар было немного.\n  В пятницу я провел первые две пары за компьютером, изучая C++. С 15:00 до 19:20 я занимался английским языком.\n  Я не ходил на пары в субботу. На стадионе РУДН прошли соревнования по бегу, там занял 2 место, поздравьте меня.\n  В воскресенье полностью отдохнул морально и физически.\n  ","date":1652918400,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652918400,"objectID":"7679dc8496a97e10a8c3e6e461f6221b","permalink":"https://stifell.github.io/ru/post/lastweek3/","publishdate":"2022-05-19T00:00:00Z","relpermalink":"/ru/post/lastweek3/","section":"post","summary":"О том, как я провел прошлую неделю","tags":["Моя неделя"],"title":"Моя прошлая неделя","type":"post"},{"authors":["Матюшкин Денис"],"categories":["Учеба"],"content":"Важные правила при создании презентации Правило 1 — текст должен читаться Понятие читабельности простым языком означает возможность текста быть легким для прочтения. Например, если поставить белый текст на черный фон, то пункт с читабельностью будет выполнен на 100%.\nЕсли же текст фиолетового цвета написать на красном фоне, то глазу рядового зрителя будет тяжело сконцентрироваться на информации при таком обилии цвета и яркости.\nПравило 2 — цвета Перед стартом создания презентации всегда хорошо отработать ее цветовое наполнение, выбрать определенную палитру цветов из двух-трех главных оттенков и строить вокруг них всю базу. В Powerpoint или Keynote удобно сразу же эту палитру сохранять, чтобы видеть все рабочие цвета перед глазами. При наполнении презентации лучше не использовать больше двух-трех цветов на слайде, иначе внимание зрителя может рассеяться из-за обилия оттенков. Важно каждому цвету придавать особое значение, например все заголовки делать желтыми, а весь основной текст — белого или черного цвета. Если мы подкрепим информацию цветом, то читателю будет легче анализировать слайд, и он сможет быстро найти нужную информацию.\nНа слайде ниже мы даем заголовку и нумерации оранжевый цвет, тем самым направляя зрителя от якорей нашего слайда к основному черному тексту. Черного цвета на слайде больше всего, соответственно читатель делает вывод, что это и есть объемная основная информация.\nПравило 3 — текст и его стиль Формат шрифтов при написании заголовков, основного текста и колонтитулов влияет на то, как будет восприниматься информация. Чаще всего для заголовков используется стиль с засечками, то есть с заостренными углами. Для основного текста больше подойдет шрифт без засечек, то есть с прямыми углами и плавными линиями.\nПодсказку по стилю шрифта нам даст сам текст, на примере с малышом и мамой логичнее работать с текстом без засечек, чтобы он лишний раз не перегружал воздушный приятный слайд.\nПравило 4 — картинка в качестве HQ При открытии каждого нового слайда пользователь ищет глазами визуал, графику или иллюстрацию, те объекты, которые помогут ему отдохнуть во время чтения большого объема текста или подкрепить прочитанную информацию.\nПри создании графических форм и объектов с нуля не возникает трудностей с их качеством и воспроизведением на слайде, а если же сохранять картинки из интернет-источников и вставлять на слайд, то качество может быть плохое. Почему так происходит?\nЧаще всего при поиске картинок мы не обращаем внимание на то, как они выглядят в полноэкранном режиме. Мы видим их в маленьком формате и они зачастую смотрятся хорошо. Однако выведение слайда в полноэкранном режиме на аудиторию или трансляция его на большом экране компьютера может подчеркнуть некачественное изображение. Важно иметь доступ к HQ картинка, чтобы у зрителя не возникло ощущение не профессионально подготовленной презентации.\nПравило 5 — не перегружайте слайд В школе мы часто делали презентации и большинство из них структурно и композиционно выглядели вот так.\nК сожалению такие слайды абсолютно не дышат, не имеют свободного пространства, то есть воздуха. А воздух — это самое важное на слайде, без него макет тонет в текстовой и визуальной информации. Задача дизайнера — расставить объекты на слайде таким образом, чтобы они сосуществовали, а не вытесняли друг друга. В белом пространстве (в воздухе) нет ничего плохого. Наоборот, чем его больше, тем проще и минималистичнее смотрится слайд, а значит и понятнее для читателя.\nСмысл любого дизайна — это донесение информации в четкой и понятной форме, логичное расположение элементов на слайде, создание аккуратной и четкой структуры. А уже в последнюю очередь это стиль, красота и визуальное оформление.\n","date":1652918400,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652918400,"objectID":"214c5924b1b133f59de9102689098968","permalink":"https://stifell.github.io/ru/post/presentation/","publishdate":"2022-05-19T00:00:00Z","relpermalink":"/ru/post/presentation/","section":"post","summary":"Статья о том, как лучше создавать презентации","tags":["Образование"],"title":"Презентация","type":"post"},{"authors":["Матюшкин Денис"],"categories":["Повседневая жизнь"],"content":"Как я провел прошлую неделю:   Я ездил домой с понедельника по среду, так как были праздники.\n  В пятницу первые две пары я провел за компьютером, изучая C++. С 15:00 до 19:20 занимался английским.\n  В субботу с 12:00 до 14:50 были пары на компьютерном семинаре. Мы сделали лабораторную работу на Arduino.\n  В воскресенье я полностью отдохнул морально и физически.\n  ","date":1652486401,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652486401,"objectID":"5b210a60f2d20a07c719c771061702bc","permalink":"https://stifell.github.io/ru/post/lastweek2/","publishdate":"2022-05-14T00:00:01Z","relpermalink":"/ru/post/lastweek2/","section":"post","summary":"О том, как я провел прошлую неделю","tags":["Моя неделя"],"title":"Моя прошлая неделя","type":"post"},{"authors":["Матюшкин Денис"],"categories":["Учеба"],"content":"Статья Настоящий документ предназначен для ознакомления пользователя с функциональными возможностями языка разметки Markdown. Markdown – это облегченный язык разметки, который является инструментом преобразования кода в HTML. Главной особенностью данного языка является максимально простой синтаксис, который служит для упрощения написания и чтения кода разметки, что, в свою очередь, позволяет легко его корректировать. Теперь рассмотрим более подробно функции языка разметки Markdown.\nMarkdown не является заменой HTML. Синтаксис Markdown достаточно ограничен, и соответствует лишь небольшому подмножеству элементов HTML. Он включает в себя следующие элементы:\n Блочные элементы   Параграфы и разрывы строк; Заголовки; Цитаты; Списки Блоки кода; Горизонтальные (разделительные) линии.  Строчные элементы   Ссылки; Выделение текста; Кодовые фрагменты строк; Изображения.  Дополнительные элементы   Обратный слеш; Автоматические ссылки; Специальные символы HTML.  Более подробно с перечисленными функциями можно ознакомиться в разделе «Описание синтаксиса».\nОПИСАНИЕ СИНТАКСИСА Блочные элементы \tПараграфы и разрывы строк Для того, чтобы создать параграф с использованием синтаксиса языка Markdown, достаточно отделить строки текста одной (или более) пустой строкой (пустой считается всякая строка, которая не содержит в себе ничего, кроме пробелов и символов табуляции). Для того, чтобы вставить видимый перенос строки (элемент \u0026lt;br/\u0026gt;) необходимо окончить строку двумя пробелами и нажатием клавиши «Enter». Многие элементы синтаксиса Markdown выглядят и работают гораздо лучше в случае, когда их форматируют с помощью «жесткого перевода строк» (разделение строк, осуществленное самим пользователем, а не программой автоматически). К таким элементам относятся цитаты, списки и пр.\n Заголовки Язык разметки Markdown поддерживает 2 стиля обозначения заголовков: подчеркивание и выделение символом («#»). Выделение заголовков с помощью подчеркивания производится знаками равенства («=») в случае, если заголовок первого уровня, и дефисами («-») в случае, если заголовок второго уровня. Количество знаков подчеркивания не ограничивается. При выделении заголовков с помощью символа («#») используется от одного до шести данных символов, которые устанавливаются в начале строки (перед заголовком). В данном случае количество символов соответствует уровню заголовка. Кроме того, заголовок возможно снабдить закрывающимися символами («#»), хотя это и не является обязательным. Количество закрывающихся символов не обязано соответствовать количеству начальных символов. Уровень заголовка определяется по количеству начальных символов.\nЗаголовки первого и второго уровней, выполненные с помощью подчеркивания, выглядят следующим образом:\nЗаголовок первого уровня ======================== Заголовок второго уровня -------------------------  Заголовки первого, третьего и шестого уровней, выполненные с помощью символа («#»), выглядят следующим образом:\n# Заголовок первого уровня ### Заголовок третьего уровня ###### Заголовок шестого уровня  Приведенные выше заголовки, выполненные с помощью символа («#») тождественны следующим:\n# Заголовок первого уровня # ### Заголовок третьего уровня ### ###### Заголовок шестого уровня ######  В результате на экран выводится следующее:\nЗаголовок первого уровня Заголовок второго уровня Заголовок первого уровня Заголовок третьего уровня Заголовок шестого уровня  Цитаты Для обозначения цитат в языке Markdown используется знак «больше» («\u0026gt;»). Его можно вставлять как перед каждой строкой цитаты, так и только перед первой строкой параграфа. Также синтаксис Markdown позволяет создавать вложенные цитаты (цитаты внутри цитат). Для их разметки используются дополнительные уровни знаков цитирования («\u0026gt;»). Цитаты в Markdown могут содержать всевозможные элементы разметки. Цитаты в языке Markdown выглядят следующим образом:\n\u0026gt;Это пример цитаты, \u0026gt;в которой перед каждой строкой \u0026gt;ставится угловая скобка. \u0026gt;Это пример цитаты, в которой угловая скобка ставится только перед началом нового параграфа. \u0026gt;Второй параграф.  Вложение цитаты в цитату выглядит следующим образом:\n\u0026gt; Первый уровень цитирования \u0026gt;\u0026gt; Второй уровень цитирования \u0026gt;\u0026gt;\u0026gt; Третий уровень цитирования \u0026gt; \u0026gt;Первый уровень цитирования  В результате на экран выводится следующее:\n Это пример цитаты, в которой перед каждой строкой ставится угловая скобка.\n  Это пример цитаты, в которой угловая скобка ставится только перед началом нового параграфа.\n  Второй параграф.\n Вложенная цитата:\n Первый уровень цитирования\n Второй уровень цитирования\n Третий уровень цитирования\n  Первый уровень цитирования\n Уровень цитирования не может превышать 15-й.\n Списки Markdown поддерживает упорядоченные (нумерованные) и неупорядоченные (ненумерованные) списки. Для формирования неупорядоченный списков используются такие маркеры, как звездочки, плюсы и дефисы. Все перечисленные маркеры могут использоваться взаимозаменяемо. Для формирования упорядоченных списков в качестве маркеров используются числа с точкой. Важной особенностью в …","date":1652486400,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652486400,"objectID":"bd238f54b82fdcd586f8f7e438599565","permalink":"https://stifell.github.io/ru/post/markdown/","publishdate":"2022-05-14T00:00:00Z","relpermalink":"/ru/post/markdown/","section":"post","summary":"Статья о синтаксисе языка разметки markdown","tags":["Образование"],"title":"Markdown","type":"post"},{"authors":["Матюшкин Денис"],"categories":["Повседневая жизнь"],"content":"Как я провел прошлую неделю   Начало недели выдалось легким, поэтому в понедельник я занимался спортом и читал книгу.\n  Вторник и среда в целом ничем не отличались, разве что я начал делать лабораторные работы по операционным системам.\n  В четверг я пошел в университет на первые две пары. Задавал интересующие вопросы по лабораторной.\n  Пятница — тяжелый день. Первые две пары я провел за компьютером, изучая C++. По плану должен быть английский с 15:00 до 19:20, но было только онлайн-мероприятие.\n  В субботу с 12:00 до 14:50 по компьютерному практику были пары. Мы сделали лабораторную работу на Arduino.\n  В воскресенье полностью отдохнул морально и физически.\n  ","date":1651708800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651708800,"objectID":"087bb46f04e314fdc707fd3d132ba699","permalink":"https://stifell.github.io/ru/post/lastweek1/","publishdate":"2022-05-05T00:00:00Z","relpermalink":"/ru/post/lastweek1/","section":"post","summary":"О том, как я провел прошлую неделю","tags":["Моя неделя"],"title":"Моя прошлая неделя","type":"post"},{"authors":["Матюшкин Денис"],"categories":["Учеба"],"content":"Управление версиями Системы контроля версий (Version Control System, VCS) применяются при работе несколь- ких человек над одним проектом. Обычно основное дерево проекта хранится в локальном или удалённом репозитории, к которому настроен доступ для участников проекта. При внесении изменений в содержание проекта система контроля версий позволяет их фиксировать, совмещать изменения, произведённые разными участниками проекта, производить откат к любой более ранней версии проекта, если это требуется.\nВ классических системах контроля версий используется централизованная модель, предполагающая наличие единого репозитория для хранения файлов. Выполнение боль- шинства функций по управлению версиями осуществляется специальным сервером. Участник проекта (пользователь) перед началом работы посредством определённых команд получает нужную ему версию файлов. После внесения изменений, пользователь размещает новую версию в хранилище. При этом предыдущие версии не удаляются из центрального хранилища и к ним можно вернуться в любой момент. Сервер может сохранять не полную версию изменённых файлов, а производить так называемую дельта- компрессию — сохранять только изменения между последовательными версиями, что позволяет уменьшить объём хранимых данных.\nСистемы контроля версий поддерживают возможность отслеживания и разрешения конфликтов, которые могут возникнуть при работе нескольких человек над одним файлом. Можно объединить (слить) изменения, сделанные разными участниками (авто- матически или вручную), вручную выбрать нужную версию, отменить изменения вовсе или заблокировать файлы для изменения. В зависимости от настроек блокировка не позволяет другим пользователям получить рабочую копию или препятствует изменению рабочей копии файла средствами файловой системы ОС, обеспечивая таким образом, привилегированный доступ только одному пользователю, работающему с файлом.\nСистемы контроля версий также могут обеспечивать дополнительные, более гибкие функциональные возможности. Например, они могут поддерживать работу с нескольки- ми версиями одного файла, сохраняя общую историю изменений до точки ветвления версий и собственные истории изменений каждой ветви. Кроме того, обычно доступна информация о том, кто из участников, когда и какие изменения вносил. Обычно такого рода информация хранится в журнале изменений, доступ к которому можно ограничить.\nВ отличие от классических, в распределённых системах контроля версий центральный репозиторий не является обязательным.\nСреди классических VCS наиболее известны CVS, Subversion, а среди распределённых — Git, Bazaar, Mercurial. Принципы их работы схожи, отличаются они в основном синтаксисом используемых в работе команд.\nGit Git — это бесплатная распределенная система управления версиями с открытым исходным кодом, предназначенная для быстрой и эффективной обработки любых проектов, от небольших до очень крупных.\nGit прост в освоении и имеет крошечный размер с молниеносной производительностью. Он превосходит инструменты SCM, такие как Subversion, CVS, Perforce и ClearCase, благодаря таким функциям, как дешевое локальное ветвление, удобные промежуточные области и несколько рабочих процессов.\nСистема выполнена в виде набора программ, специально разработанных для их использования в сценариях. Это делает удобным создание специализированных систем контроля версий на основе Git или пользовательских интерфейсов. Например, Cogito — это как раз такой пример оболочки для репозиториев Git, а StGit использует Git для управления коллекцией исправлений (патчей).\nGit поддерживает быстрое разделение и слияние версий, включает средства визуализации и навигации по нелинейной истории разработки. Подобно Darcs, BitKeeper, Mercurial, Bazaar и Monotone, Git предоставляет каждому разработчику локальную копию всей истории разработки, изменения копируются из одного репозитория в другой.\nУдаленный доступ к репозиториям Git предоставляется демоном git, сервером SSH или HTTP. Служба git-daemon TCP включена в дистрибутив Git и является, наряду с SSH, наиболее распространенным и надежным методом доступа. Метод доступа HTTP, несмотря на ряд ограничений, очень популярен в контролируемых сетях, поскольку позволяет использовать существующие конфигурации сетевых фильтров.\n","date":1651708800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651708800,"objectID":"dda65146d9fdc613ac6d0ae4ce5f42b3","permalink":"https://stifell.github.io/ru/post/git-post/","publishdate":"2022-05-05T00:00:00Z","relpermalink":"/ru/post/git-post/","section":"post","summary":"Статья о управлении версиями и о Git","tags":["Образование"],"title":"Управление версиями. Git","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://stifell.github.io/ru/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/ru/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"}]