[{"authors":null,"categories":null,"content":"Denis Matyushkin is a student of the technical direction. He is currently studying at the Peoples’ Friendship University, trying to master the subject: operating systems. His interests include programming in different languages, machine learning and learning English.\n","date":1653868801,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1653868801,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Denis Matyushkin is a student of the technical direction. He is currently studying at the Peoples’ Friendship University, trying to master the subject: operating systems. His interests include programming in different languages, machine learning and learning English.","tags":null,"title":"Matyushkin Denis","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://stifell.github.io/en/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/en/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Matyushkin Denis"],"categories":["Life"],"content":"Article How I spent the last week   The beginning of the week turned out to be easy, so on Monday I went in for sports and read a book.\n  Tuesday and Wednesday were generally no different, except that I started doing labs on operating systems.\n  Friday is a hard day. I spent the first two classes at the computer, learning C++. From 15:00 to 19:20 I studied English.\n  On Saturday from 12:00 to 14:50 there were couples for computer practice. We have done lab work on Arduino.\n  On Sunday, I completely rested mentally and physically.\n  ","date":1653868801,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653868801,"objectID":"e9dbc8a770a01a3c7a86a090c1b9af65","permalink":"https://stifell.github.io/en/post/lastweek5/","publishdate":"2022-05-30T00:00:01Z","relpermalink":"/en/post/lastweek5/","section":"post","summary":"About how I spent the last week","tags":["My week"],"title":"My last week","type":"post"},{"authors":["Matyushkin Denis"],"categories":["Academic"],"content":"Overview Hugo is a static HTML and CSS website generator written in [Go][]. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website.\nHugo relies on Markdown files with front matter for metadata, and you can run Hugo from any directory. This works well for shared hosts and other systems where you don’t have a privileged account.\nHugo renders a typical website of moderate size in a fraction of a second. A good rule of thumb is that each piece of content renders in around 1 millisecond.\nHugo is designed to work well for any kind of website including blogs, tumbles, and docs.\nSupported Architectures Currently, we provide pre-built Hugo binaries for Windows, Linux, FreeBSD, NetBSD, DragonFly BSD, OpenBSD, macOS (Darwin), and Android for x64, i386 and ARM architectures.\nHugo may also be compiled from source wherever the Go compiler tool chain can run, e.g. for other operating systems including Plan 9 and Solaris.\nComplete documentation is available at Hugo Documentation.\nChoose How to Install If you want to use Hugo as your site generator, simply install the Hugo binaries. The Hugo binaries have no external dependencies.\nTo contribute to the Hugo source code or documentation, you should fork the Hugo GitHub project and clone it to your local machine.\nFinally, you can install the Hugo source code with go, build the binaries yourself, and run Hugo that way. Building the binaries is an easy task for an experienced go getter.\nInstall Hugo as Your Site Generator (Binary Install) Use the installation instructions in the Hugo documentation.\nBuild and Install the Binaries from Source (Advanced Install) Prerequisite Tools  Git Go (we test it with the last 2 major versions; but note that Hugo 0.95.0 only builds with \u0026gt;= Go 1.18.)  Fetch from GitHub To fetch and build the source from GitHub:\nmkdir $HOME/src cd $HOME/src git clone https://github.com/gohugoio/hugo.git cd hugo go install If you are a Windows user, substitute the $HOME environment variable above with %USERPROFILE%.\nIf you want to compile with Sass/SCSS support use --tags extended and make sure CGO_ENABLED=1 is set in your go environment. If you don’t want to have CGO enabled, you may use the following command to temporarily enable CGO only for hugo compilation:\nCGO_ENABLED=1 go install --tags extended The Hugo Documentation The Hugo documentation now lives in its own repository, see https://github.com/gohugoio/hugoDocs. But we do keep a version of that documentation as a git subtree in this repository. To build the sub folder /docs as a Hugo site, you need to clone this repo:\ngit clone git@github.com:gohugoio/hugo.git ","date":1653868800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653868800,"objectID":"1ba1da42e133e1a006844b4b012bf188","permalink":"https://stifell.github.io/en/post/hugo/","publishdate":"2022-05-30T00:00:00Z","relpermalink":"/en/post/hugo/","section":"post","summary":"Article about hugo static site generator","tags":["Education"],"title":"Hugo static site generator","type":"post"},{"authors":["Matyushkin Denis"],"categories":["Life"],"content":"Article How I spent last week:\n  The days from Monday to Thursday were easy, as there were few pairs, but there were a lot of laboratory tests on the OS, so I started doing, I didn’t get lazy.\n  On Friday, I spent the first two pairs at the computer, learning C++. From 15:00 to 19:20 I studied English.\n  I went to IT classes on Saturday, did lab tests on Arduino. After that, I went to a running competition between Moscow universities.\n  On Sunday I completely rested mentally and physically.\n  ","date":1653523201,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653523201,"objectID":"0eb5748af843b81c4aa5883c537ac912","permalink":"https://stifell.github.io/en/post/lastweek4/","publishdate":"2022-05-26T00:00:01Z","relpermalink":"/en/post/lastweek4/","section":"post","summary":"About how I spent the last week","tags":["My week"],"title":"My last week","type":"post"},{"authors":["Matyushkin Denis"],"categories":["Academic"],"content":"Article Scientific programming language In computer programming, a scientific programming language can refer to two degrees of the same concept.\nIn a wide sense, a scientific programming language is a programming language that is used widely for computational science and computational mathematics. In this sense, C/C++ and Python can be considered scientific programming languages.\nIn a stronger sense, a scientific programming language is one that is designed and optimized for the use of mathematical formula and matrices. Such languages are characterized not only by the availability of libraries performing mathematical or scientific functions, but by the syntax of the language itself.[3] For example, neither C++ nor Python have built-in matrix types or functions for matrix arithmetic (addition, multiplication etc); instead, this functionality is made available through standard libraries. Scientific programming languages in the stronger sense include ALGOL, APL, Fortran, J, Julia, Maple, MATLAB and R\nScientific programming languages should not be confused with scientific language in general, which refers loosely to the higher standards in precision, correctness and concision expected from practitioners of the scientific method. Contents\nExamples Linear algebra\nScientific programming languages provide facilities to work with linear algebra. For example, the following Julia program solves a system of linear equations:\nA = rand(20, 20) # A is a 20x20 matrix b = rand(20) # b is a 20-element vector x = A\\b # x is the solution to A*x = b  Working with large vectors and matrices is a key feature of these languages, as linear algebra lays the foundation to mathematical optimization, which in turn enables major applications such as deep learning. Mathematical optimization\nIn a scientific programming language, we can compute function optima with a syntax close to mathematical language. For instance, the following Julia code finds the minimum of the polynomial P(x,y) = x^2 − 3xy + 5y^2 − 7y + 3\nusing Optim P(x,y) = x^2 - 3x*y + 5y^2 - 7y + 3 z₀ = [ 0.0 0.0 ] # starting point for optimization algorithm optimize(z -\u0026gt; P(z...), z₀, Newton(); autodiff = :forward) In this example, Newton’s method for minimizing is used. Modern scientific programming languages will use automatic differentiation to compute the gradients and Hessians of the function given as input; cf. differentiable programming. Here, automatic forward differentiation has been chosen for that task. Older scientific programming languages such as the venerable Fortran would require the programmer to pass, next to the function to be optimized, a function that computes the gradient, and a function that computes the Hessian.\nWith more knowledge of the function to be minimized, more efficient algorithms can be used. For instance, convex optimization provides faster computations when the function is convex, quadratic programming provides faster computations when the function is at most quadratic in its variables, and linear programming when the function is at most linear.\n","date":1653523200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653523200,"objectID":"505f1926928104c1ffdf04557ad3e744","permalink":"https://stifell.github.io/en/post/programming/","publishdate":"2022-05-26T00:00:00Z","relpermalink":"/en/post/programming/","section":"post","summary":"Article about scientific programming language","tags":["Education"],"title":"Scientific programming language","type":"post"},{"authors":null,"categories":["Python"],"content":"Part 1: Registering a bot The simplest and most described part. Very briefly: you need to find the bot @BotFather, write to him /start, or / newbot, fill in the fields that he asks (the name of the bot and its short name), and get a message with the bot token and a link to the documentation. The token must be saved, preferably securely, since this is the only key for authorization of the bot and interaction with it.\nPart 2: Preparing to write code As already mentioned in the title, we will write the bot in Python. This article will describe working with the PyTelegramBotAPI (Telebot) library. If you don’t have Python installed, then first you need to do this: in the Linux terminal, you need to enter\nsudo apt-get install python python-pip  If you use Windows, then you need to download Python from the official website.\nAfter that, in the Linux terminal, or the Windows command line, enter\npip install pytelegrambotapi  Now everything is ready to write the code.\nPart 3: We receive messages and say “Hello” A small digression. Telegram is able to inform the bot about user actions in two ways: through a response to a server request (Long Poll), and through a Webhook, when the Telegram server itself sends a message that someone wrote to the bot. The second method clearly looks better, but requires a dedicated IP address, and SSL installed on the server. In this article, I want to talk about writing a bot, not setting up a server, so we will use a Long Poll.\nOpen your favorite text editor and let’s write the bot code!\nThe first thing to do is to import our library and connect the bot token:\nimport telebot; bot = telebot.TeleBot (\u0026#39;%your token%\u0026#39;); Now let’s declare a method for receiving text messages:\n@bot.message_handler(content_types=[\u0026#39;text\u0026#39;]) def get_text_messages(message): In this section of the code, we have declared a listener for text messages and a method for processing them. The content_types field can take different values, and not just one, for example\n@bot.message_handler(content_types=[\u0026#39;text\u0026#39;, \u0026#39;document\u0026#39;, \u0026#39;audio\u0026#39;]) It will respond to text messages, documents and audio. You can read more in the official documentation\nNow let’s add some functionality to our method: if the user writes us “Hello”, then we will tell him “Hello, how can I help?”, and if they write us the command “/help”, then we will tell the user to write “Hello”:\nif message.text == \u0026#34;Hello\u0026#34;: bot.send_message(message.from_user.id , \u0026#34;Hi, how can I help you?\u0026#34;) elif message.text == \u0026#34;/help\u0026#34;: bot.send_message(message.from_user.id , \u0026#34;Write hello\u0026#34;) else: bot.send_message(message.from_user.id \u0026#34;I don\u0026#39;t understand you. Write /help.\u0026#34;) This section of the code does not require comments, as it seems to me. Now we need to add only one line to our code (outside of all methods).\nbot.polling(none_stop=True, interval=0) Now our bot will constantly ask the Telegram server “Has someone written to me?”, and if we write to our bot, the Telegram will give him our message. Save the entire file, and write in the console\npython bot.py  Where bot.py – the name of our file.\nNow you can write to the bot and see the result:\n   Part 4: Buttons and Message Branches Sending messages is undoubtedly fun, but it’s even more fun to have a dialogue with the user: ask him questions and get answers to them. Let’s say now our bot will ask the user in turn for his first name, last name and age. To do this, we will use the register_next_step_handler method of the bot:\nname = \u0026#39;\u0026#39;; surname = \u0026#39;\u0026#39;; age = 0; @bot.message_handler(content_types=[\u0026#39;text\u0026#39;]) def start(message): if message.text == \u0026#39;/reg\u0026#39;: bot.send_message(message.from_user.id , \u0026#34;What is your name?\u0026#34;); bot.register_next_step_handler(message, get_name); #the next step is the get_name else function else: bot.send_message(message.from_user.id , \u0026#39;Write /reg\u0026#39;); def get_name(message): #getting the last name global name; name = message.text; bot.send_message(message.from_user.id , \u0026#39;What is your last name?\u0026#39;); bot.register_next_step_handler(message, get_surnme); def get_surname(message): global surname; surname = message.text; bot.send_message(\u0026#39;How old are you?\u0026#39;); bot.register_next_step_handler(message, get_age); def get_age(message): global age; while age == 0: #check that the age has changed try: age = int(message.text) #check that the age is entered correctly except Exception: bot.send_message(message.from_user.id , \u0026#39;In numbers, please\u0026#39;); bot.send_message(message.from_user.id , \u0026#39;You\u0026#39;+str(age)+\u0026#39; years, your name is \u0026#39;+name+\u0026#39; \u0026#39;+surname+\u0026#39;?\u0026#39;) And so, we recorded the user’s data. This example shows a very simplified example, in a good way, you need to store intermediate data and user states in a database, but today we are working with a bot, not databases. The final touch – we will ask users to confirm that everything is entered correctly, and not just like that, but with buttons! To do this, edit the code of the get_age method a little\ndef get_age(message): global age; while age == 0: #check that the age has changed try: age = int(message.text) …","date":1653523200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653523200,"objectID":"bc2c09c3ef4101dd0e9dbfba61006c3f","permalink":"https://stifell.github.io/en/project/tgbot/","publishdate":"2022-05-26T00:00:00Z","relpermalink":"/en/project/tgbot/","section":"project","summary":"Project about telegram bot in python.","tags":["Deep Learning"],"title":"Telegram bot python","type":"project"},{"authors":["Matyushkin Denis"],"categories":["Life"],"content":"Article How I spent last week:\n  The days from Monday to Thursday were easy, as there were not many couples.\n  On Friday, I spent the first two pairs at the computer, learning C++. From 15:00 to 19:20 I studied English.\n  I didn’t go to couples on Saturday. There were running competitions at the RUDN Stadium. I took 2nd place, congratulate me.\n  On Sunday I completely rested mentally and physically.\n  ","date":1652918400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652918400,"objectID":"7679dc8496a97e10a8c3e6e461f6221b","permalink":"https://stifell.github.io/en/post/lastweek3/","publishdate":"2022-05-19T00:00:00Z","relpermalink":"/en/post/lastweek3/","section":"post","summary":"About how I spent the last week","tags":["My week"],"title":"My last week","type":"post"},{"authors":["Matyushkin Denis"],"categories":["Academic"],"content":"Article: Important rules when creating a presentation Rule 1 — the text must be read The concept of readability in simple language means that the text can be easy to read. For example, if you put white text on a black background, then the item with readability will be 100% completed.\nIf the purple text is written on a red background, then it will be difficult for the eye of an ordinary viewer to concentrate on information with such an abundance of color and brightness.\nRule 2 — Colors Before starting to create a presentation, it is always good to work out its color content, choose a certain palette of colors from two or three main shades and build the entire base around them. In Powerpoint or Keynote, it is convenient to save this palette immediately so that you can see all the working colors in front of your eyes. When filling a presentation, it is better not to use more than two or three colors on the slide, otherwise the viewer’s attention may dissipate due to the abundance of shades. It is important to attach special importance to each color, for example, to make all headings yellow, and the entire main text white or black. If we reinforce the information with color, it will be easier for the reader to analyze the slide, and he will be able to quickly find the necessary information.\nIn the slide below, we give the title and numbering an orange color, thereby directing the viewer from the anchors of our slide to the main black text. The black color on the slide is the most, respectively, the reader concludes that this is the bulk of the basic information.\nRule 3 — Text and its style The font format when writing headers, body text and footers affects how information will be perceived. Most often, the serif style is used for headings, that is, with pointed corners. For the main text, a sans-serif font is more suitable, that is, with right angles and smooth lines.\nThe text itself will give us a hint on the font style, using the example of a baby and a mother, it is more logical to work with sans-serif text so that it does not overload the airy pleasant slide once again.\nRule 4 — Picture as HQ When opening each new slide, the user looks for a visual, graphic or illustration with his eyes, those objects that will help him relax while reading a large volume of text or reinforce the information he has read.\nWhen creating graphic forms and objects from scratch, there are no difficulties with their quality and reproduction on the slide, and if you save images from Internet sources and insert them on the slide, the quality may be poor. Why is this happening?\nMost often, when searching for images, we do not pay attention to how they look in full-screen mode. We see them in a small format and they often look good. However, displaying a slide in full-screen mode to an audience or broadcasting it on a large computer screen can emphasize a poor-quality image. It is important to have access to the HQ picture so that the viewer does not have a feeling of not professionally prepared presentation.\nRule 5 — Don’t overload the slide At school we often made presentations and most of them structurally and compositionally looked like this.\nUnfortunately, such slides absolutely do not breathe, do not have free space, that is, air. And air is the most important thing on the slide, without it, the layout is drowning in text and visual information. The designer’s task is to arrange the objects on the slide in such a way that they coexist, and not displace each other. In white space (in the air) there’s nothing wrong. On the contrary, the more of it, the simpler and more minimalistic the slide looks, and therefore clearer for the reader.\nThe meaning of any design is to convey information in a clear and understandable form, the logical arrangement of elements on the slide, the creation of a neat and clear structure. And last of all, this is style, beauty and visual design.\n","date":1652918400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652918400,"objectID":"214c5924b1b133f59de9102689098968","permalink":"https://stifell.github.io/en/post/presentation/","publishdate":"2022-05-19T00:00:00Z","relpermalink":"/en/post/presentation/","section":"post","summary":"Article about creating a presentation","tags":["Design"],"title":"Presentation","type":"post"},{"authors":["Matyushkin Denis"],"categories":["Life"],"content":"Article How I spent last week:\n  I went home from Monday to Wednesday, as there were holidays.\n  On Friday, I spent the first two pairs at the computer, studying C++. From 15:00 to 19:20 I studied English\n  On Saturday, from 12:00 to 14:50, there were couples at a computer seminar. We have done laboratory work on Arduino.\n  On Sunday I had a full rest mentally and physically\n  ","date":1652486401,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652486401,"objectID":"5b210a60f2d20a07c719c771061702bc","permalink":"https://stifell.github.io/en/post/lastweek2/","publishdate":"2022-05-14T00:00:01Z","relpermalink":"/en/post/lastweek2/","section":"post","summary":"About how I spent the last week","tags":["My week"],"title":"My last week","type":"post"},{"authors":["Matyushkin Denis"],"categories":["Academic"],"content":"Article This document is intended to familiarize the user with the functionality of the Markdown markup language. Markdown is a lightweight markup language that is a tool for converting code to HTML. The main feature of this language is the simplest syntax, which serves to simplify writing and reading markup code, which, in turn, makes it easy to correct it. Now let’s take a closer look at the functions of the Markdown markup language.\nMarkdown is not a replacement for HTML. The Markdown syntax is quite limited, and corresponds to only a small subset of HTML elements. It includes the following elements:\n Block elements   Paragraphs and Line Breaks; Headers; Quotes; Lists Code Blocks; Horizontal (dividing) lines.  Lowercase elements   Links; Text Selection; Code fragments of strings; Images.  Additional elements   Backslash; Automatic Links; HTML Special Characters.  For more information about the listed functions, see the section “Syntax Description”.\nSYNTAX DESCRIPTION Block elements  Paragraphs and line breaks In order to create a paragraph using the syntax of the Markdown language, it is enough to separate the lines of text with one (or more) empty line (any line that contains nothing but spaces and tab characters is considered empty). In order to insert a visible line break (the \u0026lt;br/\u0026gt; element), you must end the line with two spaces and press the “Enter” key. Many elements of the Markdown syntax look and work much better when they are formatted using “hard line translation” (line separation performed by the user himself, and not by the program automatically). Such elements include quotes, lists, etc.\n Headings The Markdown markup language supports 2 styles of heading designations: underlining and highlighting with a symbol (\u0026#34;#\u0026#34;). Headings are highlighted using underscores with equal signs (\u0026#34;=\u0026#34;) if the title is of the first level, and hyphens (\u0026#34;-\u0026#34;) if the title is of the second level. The number of underscores is not limited. When selecting headers using the symbol (\u0026#34;#\u0026#34;), from one to six of these characters are used, which are set at the beginning of the line (before the header). In this case, the number of characters corresponds to the header level. In addition, it is possible to provide the title with closing characters (\u0026#34;#\u0026#34;), although this is not mandatory. The number of closing characters does not have to match the number of initial characters. The level of the header is determined by the number of initial characters.\nThe headings of the first and second levels, made using underscores, look like this:\nFirst level header ======================== Second level header -------------------------  The headers of the first, third and sixth levels, made using the symbol (\u0026#34;#\u0026#34;), look like this:\n# The header of the first level ### Third level header ###### Sixth level header  The above headings made with the symbol (\u0026#34;#\u0026#34;) are identical to the following:\n# First level header # ### Third level header ### ###### Sixth level header ######  As a result, the following is displayed on the screen:\nFirst level header Second level header First level header Third level header Sixth level header  Quotes The Markdown language uses the “more” (\u0026#34;\u0026gt;\u0026#34;) sign to indicate quotations. It can be inserted both before each line of the quotation, and only before the first line of the paragraph. Also, the Markdown syntax allows you to create nested quotes (quotes inside quotes). Additional levels of citation marks (\u0026#34;\u0026gt;\u0026#34;) are used to mark them. Quotes in Markdown can contain all kinds of markup elements. Quotes in the Markdown language look like this:\n\u0026gt;This is an example quote, \u0026gt;in which \u0026gt;an angle bracket is placed before each line. \u0026gt;This is an example quote, in which the angle bracket it is put only before the beginning of a new paragraph. \u0026gt;The second paragraph.  Embedding a quote into a quote looks like this:\n\u0026gt; First Citation level \u0026gt;\u0026gt; Second level of citation \u0026gt;\u0026gt;\u0026gt; Third level of citation \u0026gt; \u0026gt;First Citation level  As a result, the following is displayed on the screen:\n This is an example quote, in which before each line an angle bracket is placed.\n  This is an example of a quote in which an angle bracket is placed just before the beginning of a new paragraph.\n  The second paragraph.\n Enclosed quote:\n First Citation level\n Second level of citation\n Third Citation Level\n  First Citation Level\n The citation level cannot exceed the 15th.\n Lists Markdown supports ordered (numbered) and unordered (unnumbered) lists. Markers such as asterisks, pluses and hyphens are used to form unordered lists. All the listed markers can be used interchangeably. To form ordered lists, numbers with a dot are used as markers. An important feature in this case is that the numbers themselves, with which the list is formed, are not important, since they do not affect the output HTML code. No matter how the user numbers the list, the output will in any case have an ordered list starting with one (1, 2, 3 …). This feature should be taken into account when it is necessary …","date":1652486400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652486400,"objectID":"bd238f54b82fdcd586f8f7e438599565","permalink":"https://stifell.github.io/en/post/markdown/","publishdate":"2022-05-14T00:00:00Z","relpermalink":"/en/post/markdown/","section":"post","summary":"Article about Markdown markup language.","tags":["Education"],"title":"Markdown","type":"post"},{"authors":["Matyushkin Denis"],"categories":["Life"],"content":"Article How I spent last week:\n  The beginning of the week turned out to be easy, so on Monday I played sports and read a book.\n  Tuesday and Wednesday were no different in general, except that I started doing laboratory work on operating systems.\n  On Thursday I went to university for the first two pairs. Asked interesting questions about the laboratory.\n  Friday is a hard day. I spent the first two pairs at the computer, studying C++. According to the plan, there should be English from 15:00 to 19:20, but there was only an online event.\n  On Saturday, from 12:00 to 14:50, there were couples on a computer workshop. We did laboratory work on Arduino.\n  On Sunday, completely mentally and physically rested.\n  ","date":1651708800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651708800,"objectID":"087bb46f04e314fdc707fd3d132ba699","permalink":"https://stifell.github.io/en/post/lastweek1/","publishdate":"2022-05-05T00:00:00Z","relpermalink":"/en/post/lastweek1/","section":"post","summary":"About how I spent the last week","tags":["My week"],"title":"My last week","type":"post"},{"authors":["Matyushkin Denis"],"categories":["Academic"],"content":"Article: Version control Version Control Systems (VCS) are used when several people work on one project. Usually, the main project tree is stored in a local or remote repository, to which access is configured for project participants. When making changes to the project content, the version control system allows you to fix them, combine changes made by different project participants, roll back to any earlier version of the project, if required.\nIn classical version control systems, a centralized model is used, assuming a single repository for storing files. Most version control functions are performed by a special server. The project participant (user) receives the version of files he needs before starting work through certain commands. After making changes, the user places the new version in the repository. At the same time, previous versions are not deleted from the central repository and you can return to them at any time. The server can not to save the full version of the modified files, but to perform a so—called delta compression - to save only changes between successive versions, which reduces the amount of data stored.\nVersion control systems support the ability to track and resolve conflicts that may arise when several people are working on a single file. You can merge (merge) changes made by different participants (automatically or manually), manually select the desired version, cancel the changes altogether or lock files for modification. Depending on the settings, the lock is not allows other users to get a working copy or prevents changing the working copy of the file by means of the OS file system, thus providing privileged access to only one user working with the file.\nVersion control systems can also provide additional, more flexible functionality. For example, they can support working with multiple versions of a single file, keeping a common history of changes up to the point of branching versions and their own change histories of each branch. In addition, it is usually available information about which of the participants, when and what changes were made. Usually this kind of information is stored in the change log, access to which can be restricted. Unlike the classical ones, in distributed version control systems, a central repository is not mandatory.\nAmong the classic VCS, the most famous are CVS, Subversion, and among the distributed ones — Git, Bazaar, Mercurial. The principles of their work are similar, they differ mainly in the syntax of the commands used in the work.\nGit Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.\nGit is easy to learn and has a tiny footprint with lightning fast performance. It outclasses SCM tools like Subversion, CVS, Perforce, and ClearCase with features like cheap local branching, convenient staging areas, and multiple workflows. The system is designed as a set of programs specially designed for their use in scenarios. This makes it convenient to create specialized version control systems based on Git or user interfaces. For example, Cogito is just such an example of a wrapper to Git repositories, and StGit uses Git to manage a collection of fixes (patches).\nGit supports rapid separation and merging of versions, includes tools for visualization and navigation through the non-linear development history. Like Darcs, BitKeeper, Mercurial, Bazaar and Monotone, Git provides each developer with a local copy of the entire development history, changes are copied from one repository to another.\nRemote access to Git repositories is provided by a git daemon, SSH or HTTP server. The git-daemon TCP service is included in the Git distribution and is, along with SSH, the most common and reliable access method. The HTTP access method, despite a number of restrictions, is very popular in controlled networks, because it allows you to use existing network filter configurations.\n","date":1651708800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651708800,"objectID":"dda65146d9fdc613ac6d0ae4ce5f42b3","permalink":"https://stifell.github.io/en/post/git-post/","publishdate":"2022-05-05T00:00:00Z","relpermalink":"/en/post/git-post/","section":"post","summary":"Article about Version сontrol and Git","tags":["Education"],"title":"Version control. Git.","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://stifell.github.io/en/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/en/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://stifell.github.io/en/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/en/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"},{"authors":["Matyushkin Denis","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://stifell.github.io/en/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/en/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]